import { useState, useContext, useEffect } from 'react'
import Head from 'next/head'
import TodoItem from '../components/todoItem'
import styles from '../styles/Home.module.css'
import prisma from '../lib/prisma';
import TasksProgress from '../components/tasksProgress'
import { Context } from "../context";
import {  getSession } from 'next-auth/react'
import { AnimateSharedLayout, AnimatePresence} from 'framer-motion'

export default function Home(props) {
  
  const [tasks, setTasks] = useState(props.todos)
  const [completedTasks, setCompletedTasks] = useState(props.todos.filter(x => x.status === true))
  const { state, dispatch } = useContext(Context);
  

  
  async function getTodos() {
    const request = await fetch(`/api/todos`)
    const data = await request.json()
    setTasks(data.data)   
    dispatch({
      type: "ADD_TASK",
      payload: data.data
    }) 
}


async function dbStatusChange(id, status) {
  const req = await fetch('/api/todos/update', {
    method: "POST",
    body: JSON.stringify({
      id: id,
      data : {
        status: status
      }
    })
  })
   if (!req.ok) {
     throw Error(req.statusText);
   }
   return await req.json()
}

async function dbDelete(id) {
  const req = await fetch('/api/todos/delete', {
    method: "POST",
    body: JSON.stringify({
      id: id
    })
  })
   if (!req.ok) {
     throw Error(req.statusText);
   }
   return await req.json()
} 

  const deleteItem = (e) => {
    const items = state.tasks
    const index = state.tasks.indexOf(e)
    items.splice(index, 1)
    setTasks(items)
    dispatch({
      type: "ADD_TASK",
      payload: items
    })
    setCompletedTasks(tasks.filter(x => x.status === true))
    dbDelete(e.id)
  }

  const statusChange = (e) => {    
    const items = state.tasks
    const item = e
    item.status = !e.status
    const index = tasks.indexOf(e)
    items[index] = item
    setTasks(items)
    dispatch({
      type: "ADD_TASK",
      payload: items
    })
    setCompletedTasks(state.tasks.filter(x => x.status === true))
    dbStatusChange(e.id, e.status)
    }


   


    useEffect(() => {
      getTodos() 
      console.log(state)
    }, [])


  return (
  <>
    <Head>
        <title>Million Dollar Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/icon.png" />
    </Head>
    <div className={styles.container}>
    <header className={styles.greeting_container}>
        <h1 className={styles.title}>Home</h1>
        <div >
          <p className={styles.greeting}>Hello</p>
          <p className={styles.greeting}>{props.username}</p>
        </div>
      <section>
      <TasksProgress total={tasks.length} done={completedTasks.length} progress={completedTasks.length / props.todos.length * 100 + "%"}/>  
      </section>
      </header>
      <section className={styles.right_section}>
        <span>Todays Tasks</span>
          <AnimateSharedLayout type="crossfade">
        <AnimatePresence>


    {
      state.tasks.map((x, y) => 
      <TodoItem key={y} title={x.title} order={y} delete={() => deleteItem(x)} category={x.category} date={x.createdAt} done={x.status} statusChange={() => statusChange(x)}/>
      )
    }
      </AnimatePresence>
          </AnimateSharedLayout>
    </section>
    </div>
  </>
  )
}

export async function getServerSideProps(context) {

const session = await getSession(context)
let data = null;
let username = null;

if(!session) {
  context.res.writeHead(307, {Location: '/profile'})
}else {
username = session.user.name
data = await prisma.todo.findMany({
  where: {
    User: { email: session.user.email }
  },
 select: {
   id: true,
   title: true,
   status: true,
   category: true,
 }
})
}



    return {
      props: {
        todos:  data,
        username: username    
      }
    }
  
  }

