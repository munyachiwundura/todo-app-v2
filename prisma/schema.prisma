// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
 provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}



model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @map(name: "refresh_token")
  access_token       String? @map(name: "access_token")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @map(name: "id_token")
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id         String    @id @default(cuid())
  name       String?
  email      String?        @unique
  emailVerified DateTime? @map("email_verified")
  todos      Todo[]
  categories TodoCategory[]
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model TodoCategory {
  id     Int    @id @default(autoincrement())
  User   User?  @relation(fields: [userId], references: [id])
  title  String
  color String
  icon String
  todo   Todo[]
  userId       String   @map("user_id")
}

model Todo {
  id          Int            @id @default(autoincrement())
  User        User?          @relation(fields: [userId], references: [id])
  title       String?
  category    TodoCategory   @relation(fields: [categoryId], references: [id])
  status      Boolean        @default(false)
  createdAt   DateTime       @default(now())
  completeby DateTime
  categoryId  Int
  userId       String   @map("user_id")
}
